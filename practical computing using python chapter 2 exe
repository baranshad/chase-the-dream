#%% 2.1 
count=0
for number in range(100,1000):
    if number % 17 == 0 : 
        count += 1 
        print(number)
    else:
        continue
    number += number
   # count += 1  here is also correct 
    
print("sequence", count, "number") 

#%% 2.6
char='alphebetical'
for i in range(0,len(char)):
    if i % 3 == 2:
       print(char[i],end="")
    # i= i+1 add this is also correct 

#%% 2.10 
import math
number_str=input("number:")
number=int(number_str)

while math.sqrt(number) % 1 != 0 :
        number=int(input("number")) # this cannot be delete , need to update input number 
        # if delete, then non stopping print 
        print(" the number is not perfect square", number)
else: 
        print(" the number is perfect square", number)
       
#%% 2.10 
def is_square(apositiveint):
  x = apositiveint // 2
  seen = set([x])
  while x * x != apositiveint:
    x = (x + (apositiveint // x)) // 2
    if x in seen: return False
    seen.add(x)
  return True

for i in range(110, 130):
   print(i, is_square(i))  
#%% 11.b 
sum_int=0
number=int(input("number is:"))
for i in range(1,number+1):
     sum_int += i 
     print(sum_int)
#%% 11.c 
number=int(input("number is:"))
sum_int=0
for i in range(1,number+1):
        sum_int += i
        if  i % 2 == 1 :
            print(sum_int)

#%% 14
string='123456789'
for i in range(1,len(string)+1):
    print(int(string[:i])*8+i)
for i in range(1,len(string)+1):
    print(int(string[:i])*9+i+1)
string_invert=string[::-1]
for i in range(1,len(string_invert)):
    print(int(string_invert[:i])*9+8-i)
one_string='111111111'
for i in range(1,len(one_string)+1):
    print(int(one_string[:i])*int(one_string[:i]))  
    
#%% 15
import math
number=int(input("the number is:"))
i=2
while i<= (math.sqrt(number)):
    if number % i == 0:
        i+=1 # loop all i
        print("this number is not a prime",number)   
    else:
        i+=1 # loop all i 
        print("this number is a prime",number) #some bug 
  
 
